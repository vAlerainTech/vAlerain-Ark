
// Key used to decrypt apple-protected binaries.
// Due to copyright reasons we cannot publish the key,
// but we can give you clues:
//
//  http://www.osxbook.com/book/bonus/chapter7/tpmdrmmyth
//
// (look for smc_read.c)

SMC_DEVICE_KEY = "";


// Use this option to improve the analysis of macOS11 kernelcaches.
//
// macOS11 introduced a new kernelcache format, which stores kernel extensions in multiple different files:
//
//   /System/Library/KernelCollections/BootKernelExtensions.kc
//   /System/Library/KernelCollections/SystemKernelExtensions.kc
//   /Library/KernelCollections/AuxiliaryKernelExtensions.kc
//
// BootKernelExtensions.kc contains the actual mach kernel, along with some core kernel extensions.
//
// The other .kc files also contain kernel extensions, but they will have pointers to symbols
// in BootKernelExtensions.kc. Thus, IDA can't properly resolve these pointers unless it can open
// BootKernelExtensions.kc and import the symbol data.
//
// Try setting this option to:
//
//   BOOT_KC_PATH = "/System/Library/KernelCollections/BootKernelExtensions.kc";
//
// Then open SystemKernelExtensions.kc or AuxiliaryKernelExtensions.kc in IDA.
//
// The macho loader will be able to import all referenced symbols from BootKernelExtensions.kc,
// resulting in much more robust analysis.

BOOT_KC_PATH = "";


// Path to SystemKernelExtensions.kc (also see BOOT_KC_PATH above).
//
// AuxiliaryKernelExtensions.kc might contain pointers into this file.
// Set this option to import the referenced symbols.

SYS_KC_PATH = "";


// Specify the type libraries used when loading new Mach-O files.
//
// By default IDA will automatically determine the most accurate tils to load based on clues
// in the input file. If IDA does not choose correctly, you can always force it to load the
// desired tils. For example:
//
//   TIL_CONFIG = {
//     "32" : [ "macosx" ],
//     "64" : [ "macosx64" ]
//   }

TIL_CONFIG = {}
